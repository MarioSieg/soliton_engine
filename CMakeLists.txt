cmake_minimum_required(VERSION 3.10)

project(lunam LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (NOT APPLE)
    add_compile_options(-march=haswell)
endif()

# disable LTO for now
# add_link_options(-fuse-ld=lld)
# add_link_options("-Wl,--thinlto-cache-dir=${PROJECT_BINARY_DIR}/LTO.cache")
# add_link_options("-Wl,--thinlto-jobs=64")

if (WIN32)
    add_compile_options(-Xclang -fvisibility=hidden -Wno-defaulted-function-deleted)
    add_compile_options(/GR-)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    if (CMAKE_BUILD_TYPE STREQUAL "Release")
        add_compile_options(/MT)
    else()
        add_compile_options(/MTd)
    endif()
    add_compile_options(/D_ITERATOR_DEBUG_LEVEL=0)
    add_compile_options(/D_HAS_EXCEPTIONS=0)
else()
    add_compile_options(-fno-exceptions -fno-rtti)
    add_compile_options(-fvisibility=hidden)
    add_link_options(-rdynamic)
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_options(-Ofast)
    if (WIN32)
        add_compile_options(/Oy /Oi)
        add_link_options(-flto=thin)
    endif()
    #add_compile_options(-flto=thin)
    #add_link_options(-flto=thin)
else()
    if (NOT WIN32)
        add_compile_options(-O0 -gdwarf-4)
    endif()
endif()

include(src/CMakeLists.txt)
include(cmake/extern.cmake)
